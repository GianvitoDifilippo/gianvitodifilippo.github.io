{"version":3,"sources":["webpack:///./src/components/common/CodeRenderer/CodeRenderer.tsx","webpack:///./src/components/common/CodeRenderer/index.ts","webpack:///./src/components/common/App/index.ts","webpack:///./src/components/Error/data.ts","webpack:///./src/components/Error/Error.tsx","webpack:///./src/components/Error/index.ts","webpack:///./src/pages/404.tsx"],"names":["CodeRenderer","props","styleLine","bind","line","key","this","specialWords","index1","indexOf","index2","substring","className","word","index","replace","render","lines","map","activeIndex","React","App","errLines","errSpecialWords","Error","LocaleContext","locale","localeLines","setLocale","forEach","selector","i","length","translate","id","Translate","Error404Page","navThresholds","sectionSlugs"],"mappings":"u+BAwEeA,E,YAxDX,WAAYC,GACZ,aACI,cAAMA,IAAN,MAEKC,UAAY,EAAKA,UAAUC,KAAf,gBAHrB,E,4CAMAD,UAAA,SAAUE,GAEN,GAAa,KAATA,EAAa,OAAO,KAExB,IAAK,IAAIC,KAAOC,KAAKL,MAAMM,aAAc,CACrC,GAAY,WAARF,EAeC,CACD,IAAIG,EAASJ,EAAKK,QAAQ,KAC1B,IAAgB,IAAZD,EAAe,SACnB,IAAIE,EAASN,EAAKK,QAAQ,IAAKD,EAAS,GACxC,IAAgB,IAAZE,EAAe,SACnB,OACI,gCACKJ,KAAKJ,UAAUE,EAAKO,UAAU,EAAGH,IAClC,wBAAMI,UAAWP,GAAMD,EAAKO,UAAUH,EAAQE,EAAS,IACtDJ,KAAKJ,UAAUE,EAAKO,UAAUD,EAAS,KAvBhD,cAAiBJ,KAAKL,MAAMM,aAAaF,MAAzC,aAA+C,KAAtCQ,EAAsC,QACvCC,EAAQV,EAAKK,QAAQI,GACzB,IAAe,IAAXC,EAEA,OADAV,EAAOA,EAAKW,QAAQF,EAAM,IAEtB,gCACKP,KAAKJ,UAAUE,EAAKO,UAAU,EAAGG,IAClC,wBAAMF,UAAWP,GAAMQ,GACtBP,KAAKJ,UAAUE,EAAKO,UAAUG,MAoBvD,OAAO,gCAAGV,I,EAGdY,OAAA,WACA,WACI,OACI,uBAAKJ,UAAU,WACX,sBAAIA,UAAU,6BAA6BN,KAAKL,MAAMgB,MAAMC,KAAI,SAACd,EAAMU,GAAP,OAC5D,sBAAIT,IAAKS,EAAOF,UAAS,cAAeE,IAAU,EAAKb,MAAMkB,YAAc,SAAW,KAAO,EAAKjB,UAAUE,U,GAnDrGgB,iBCZZpB,O,kCCFf,gBAEeqB,MAAf,G,gJCFaC,EAAW,CACpB,qBACA,0DACA,IACA,gCACA,2CACA,QACA,OACA,qDACA,6BACA,uCACA,QACA,OACA,gCACA,0BACA,KAGSC,EAA+C,CACxD,QAAW,CACP,SACA,QACA,QACA,SACA,MACA,QAEJ,YAAe,CACX,KACA,UAEJ,KAAQ,CACJ,UACA,OACA,iBAEJ,OAAU,CACN,aACA,aACA,eACA,WACA,SACA,MAEJ,OAAU,GACV,SAAY,CACR,MACA,UACA,YCfOC,G,8BApBD,SAACvB,GAAmC,MAChBmB,aAAiBK,KAAvCC,EADsC,EACtCA,OAEFC,GAHwC,EAC9BC,UAEI,YAAIN,IAOxB,MANA,CAAE,aAAc,WAAY,UAAWO,SAAQ,SAACC,GAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IACpCJ,EAAYI,GAAKJ,EAAYI,GAAGhB,QAAQe,EAAUG,YAAU,SAASH,EAAYJ,OAKrF,uBAAKQ,GAAG,SACJ,uBAAKtB,UAAU,aACX,0BAAI,gBAACuB,EAAA,EAAD,CAAWL,SAAS,sBACxB,gBAAC9B,EAAA,EAAD,CAAciB,MAAOU,EAAapB,aAAcgB,EAAiBJ,YAAalB,EAAMkB,kBCzBrFK,O,oCCFf,uEAeeY,UARM,kBACjB,gBAAC,IAAD,CAAKxB,UAAU,cACX,gBAAC,IAAD,CAAQyB,cAAe,CAAC,GAAIC,aAAc,KAC1C,gBAAC,IAAD,CAAOnB,YAAa,IACpB,gBAAC,IAAD,S","file":"component---src-pages-404-tsx-247a01603fa44559a7d9.js","sourcesContent":["import * as React from 'react';\r\n\r\n\r\nimport './coderenderer_desktop.scss';\r\nimport './coderenderer_tablet.scss';\r\nimport './coderenderer_phone.scss';\r\n\r\n\r\ntype PropsType = {\r\n    lines: string[],\r\n    specialWords: { [key: string]: string[] },\r\n    activeIndex?: number\r\n};\r\n\r\nclass CodeRenderer extends React.PureComponent<PropsType>\r\n{\r\n    constructor(props: Readonly<PropsType>)\r\n    {\r\n        super(props);\r\n\r\n        this.styleLine = this.styleLine.bind(this);\r\n    }\r\n\r\n    styleLine(line: string): JSX.Element\r\n    {\r\n        if (line === '') return null;\r\n    \r\n        for (let key in this.props.specialWords) {\r\n            if (key !== 'string') {\r\n                for (let word of this.props.specialWords[key]) {\r\n                    let index = line.indexOf(word);\r\n                    if (index !== -1) {\r\n                        line = line.replace(word, '');\r\n                        return (\r\n                            <>\r\n                                {this.styleLine(line.substring(0, index))}\r\n                                <span className={key}>{word}</span>\r\n                                {this.styleLine(line.substring(index))}\r\n                            </>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let index1 = line.indexOf('\"');\r\n                if (index1 === -1) continue;\r\n                let index2 = line.indexOf('\"', index1 + 1);\r\n                if (index2 === -1) continue;\r\n                return (\r\n                    <>\r\n                        {this.styleLine(line.substring(0, index1))}\r\n                        <span className={key}>{line.substring(index1, index2 + 1)}</span>\r\n                        {this.styleLine(line.substring(index2 + 1))}\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n        return <>{line}</>;\r\n    }\r\n\r\n    render(): JSX.Element\r\n    {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <ul className=\"code-container has-shadow\">{this.props.lines.map((line, index) => (\r\n                    <li key={index} className={`code-line ${index === this.props.activeIndex ? 'active' : ''}`}>{this.styleLine(line)}</li>\r\n                ))}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeRenderer;","import CodeRenderer from './CodeRenderer';\r\n\r\nexport default CodeRenderer;","import App from './App';\r\n\r\nexport default App;","export const errLines = [\r\n    '[HttpGet(\"{url}\")]',\r\n    'public async Task<IActionResult> GetContent(string url)',\r\n    '{',\r\n    '    if (url == \"easteregg\") {',\r\n    '        return BadRequest(\"badrequest\");',\r\n    '    }',\r\n    '    ',\r\n    '    var content = await _router.GetPageAsync(url);',\r\n    '    if (content == null) {',\r\n    '        return NotFound(\"notfound\");',\r\n    '    }',\r\n    '    ',\r\n    '    content.Append(\"append\");',\r\n    '    return Ok(content);',\r\n    '}'\r\n];\r\n\r\nexport const errSpecialWords: { [key: string]: string[] } = {\r\n    'keyword': [\r\n        'public',\r\n        'async',\r\n        'await',\r\n        'string',\r\n        'var',\r\n        'null'\r\n    ],\r\n    'flowcontrol': [\r\n        'if',\r\n        'return'\r\n    ],\r\n    'type': [\r\n        'HttpGet',\r\n        'Task',\r\n        'IActionResult'\r\n    ],\r\n    'method': [\r\n        'GetContent',\r\n        'BadRequest',\r\n        'GetPageAsync',\r\n        'NotFound',\r\n        'Append',\r\n        'Ok'\r\n    ],\r\n    'string': [],\r\n    'variable': [\r\n        'url',\r\n        'content',\r\n        '_router'\r\n    ]\r\n};","import * as React from 'react';\r\n\r\nimport { LocaleContext } from '../../shared/context';\r\nimport Translate, { translate } from '../common/Translate';\r\nimport CodeRenderer from '../common/CodeRenderer';\r\n\r\nimport { errLines, errSpecialWords } from './data';\r\n\r\nimport './error_desktop.scss';\r\nimport './error_tablet.scss';\r\nimport './error_phone.scss';\r\n\r\n\r\nconst Error = (props: { activeIndex: number }) => {\r\n    const { locale, setLocale } = React.useContext(LocaleContext);\r\n\r\n    const localeLines = [...errLines];\r\n    [ 'badrequest', 'notfound', 'append' ].forEach((selector) => {\r\n        for (let i = 0; i < localeLines.length; i++) {\r\n            localeLines[i] = localeLines[i].replace(selector, translate(`error:${selector}`, locale))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div id=\"error\">\r\n            <div className=\"container\">\r\n                <h1><Translate selector=\"error:breakpoint\"/></h1>\r\n                <CodeRenderer lines={localeLines} specialWords={errSpecialWords} activeIndex={props.activeIndex}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import Error from './Error';\r\n\r\nexport default Error;","import * as React from 'react';\r\n\r\nimport Error from '../components/Error';\r\nimport App from '../components/common/App';\r\nimport Footer from '../components/common/Footer';\r\nimport Header from '../components/common/Header';\r\n\r\nconst Error404Page = () => (\r\n    <App className=\"error-page\">\r\n        <Header navThresholds={[0]} sectionSlugs={[]}/>\r\n        <Error activeIndex={9}/>\r\n        <Footer/>\r\n    </App>\r\n);\r\n\r\nexport default Error404Page;"],"sourceRoot":""}